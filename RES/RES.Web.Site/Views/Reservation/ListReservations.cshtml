@using RES.Commons.Core
@using TwitterBootstrap3
@using TwitterBootstrapMVC
@model RES.BusinessLogic.Core.Entities.ReservationList
@using PagedList
@using MvcPaging

@{

    Layout = "~/Views/Shared/_Layout.cshtml";

}
<div class="container">
    <div class="row">
        <div>
            <img class="image__" src="@Url.Content("~/Content/images/sort.png")">
            @Html.DropDownListFor(m => m.SortByCode, new SelectList(new List<Object>
                {
                     new { value = 0 , text = Resources.SortBy },
                     new { value = 1 , text = Resources.ByDateAscending  },
                     new { value = 2 , text = Resources.ByDateDescending },
                     new { value = 3 , text = Resources.ByAlphabeticAscending  },
                     new { value = 4 , text = Resources.ByAlphabeticDescending },
                     new { value = 5 , text = Resources.ByRanking }
                }, "value", "text"), new { data_bind = "value : sortCode", @class = "dropdown__" })
        </div>
        <table class="table" >
            @foreach (var item in Model.List)
            {
             
            <tr >
                <td class="col-xs-12 col-sm-3">
                    <div style="display: flex">
                        <img class="hidden-xs" src="@Url.Content("~/Content/images/reservation.png")" style="margin-right: 10px;">
                        <div>
                            <div>
                                @Html.DisplayFor(modelItem => item.Place.Name)
                            </div>
                            <div>
                                <p class="letter">@item.Date</p>
                               
                            </div>
                        </div>
                    </div>                   
                </td>
                <td class=" col-sm-3 hidden-xs justify-content-center">                  
                        <div>
                            @Html.Label(Resources.Ranking)
                        </div>
                        <div>
                            <div class="ec-stars-wrapper">
                                @for (int i = 0; i < item.Ranking; i++)
                                {
                                    <a data-value="@i+1" class="ec-stars-wrapper-fix">&#9733;</a>
                                }
                                @for (int i = item.Ranking; i < 5; i++)
                                {
                                    <a  data-value="@i+1" >&#9733;</a>
                                }                                
                            </div>                           
                        </div>               
                </td>
                <td class="col-xs-12 col-sm-5" style="display:flex;padding-top: 12px !important;">
                    @if (item.IsFavorite)
    {<label class="disable hidden-xs">@Resources.AddFavorites</label>
                <img class="favorite" src="@Url.Content("~/Content/images/redHeart.png")">
}
else
{
                <label class="enable hidden-xs">@Resources.AddFavorites</label>              
                <a class="enable" href="javascript:void(0);" onclick="addFavorite(@item.Id)">
                    <img class="favorite" src="@Url.Content("~/Content/images/greyHeart.png")">
                </a>
}
                </td>
                <td class="col-xs-12 col-sm-1" >
                    <div style="float: inline-end">
                        <a class="page-btn" href="@Url.Action("UpdateReservation", "Reservation", new { id = item.Id })">@Resources.Edit</a>
                    </div>                    
                </td>
            </tr>
            }
        </table>
       
       <div class="pagination__">
            <a  href="@Url.Action("ListReservations", "Reservation", new { page = 0,sortCode=Model.SortByCode })" aria-label="Previous" onclick="SetPage(@ViewBag.Page-1)">
                  <span aria-hidden="true">&laquo;</span>
                  <span class="sr-only">Previous</span>
            </a>
            @for (int i = 0; i < Model.TotalPage; i++)
            {
                var page = i + 1;
                <a  href="@Url.Action("ListReservations", "Reservation", new { page = i,sortCode=Model.SortByCode })" onclick="SetPage(@page)" class="@(ViewBag.Page == i ? "active" : null)">@page </a>
            }               
            <a  href="@Url.Action("ListReservations", "Reservation", new { page = Model.TotalPage-1,sortCode=Model.SortByCode })" aria-label="Next" onclick="SetPage(@ViewBag.Page+1)">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
            </a>
        </div>
     </div>
</div>
<script>


     var urlAddFavorite = "@Url.Action("AddFavorite", "Reservation")";
     var urlListReservation = "@Url.Action("ListReservations", "Reservation")";

    function addFavorite(id) {

        $.ajax({

            url: urlAddFavorite,
            type: "POST",
            data: '{id: ' + id + '}',
            contentType: "application/json",
            success: function (result) {
                window.location.href = urlListReservation;
            },
            error: function (xmlHttpRequest, textStatus, errorThrown) {
                alert(errorThrown);
            }
        });
    }

    ko.bindingHandlers.value = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
            // Register change callbacks to update the model
            // if the control changes.
            ko.utils.registerEventHandler(element, "change", function () {
                var value = valueAccessor();
                value((element.value));
                var s = element.value;
                var p = viewModel.page;

                window.location.href = urlListReservation+"?sortCode=" + s + "&page=" + p;
            });
        },
        // Update the control whenever the view model changes
        update: function (element, valueAccessor, allBindingsAccessor, viewModel) {

            var s = element.value;
            element.value = s;

        }
    };

    function SetPage(page) {
        viewModel.page = page;
    }

    var viewModel = {
        sortCode: ko.observable(),
        page: 0
    };


    ko.applyBindings(viewModel);
</script>

